require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
# The @react-native-community/cli-platform-ios/native_modules is usually covered by use_native_modules!
# and the react_native_pods script. If issues arise, it might need to be re-evaluated.

platform :ios, '13.4'

# Podfile.properties.json can be used to define newArchEnabled, etc.
# podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}
# ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'

use_frameworks! :linkage => :static

target 'KitchenHelper' do
  use_expo_modules! # Add Expo modules support
  config = use_native_modules!

  # Remove the manually added pod 'ExpoModulesCore' if use_expo_modules! handles it.
  # pod 'ExpoModulesCore', :path => '../node_modules/expo-modules-core' # This was added before, use_expo_modules! should cover this.

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false, # Consider making this dynamic via Podfile.properties.json
    :fabric_enabled => false, # Consider making this dynamic via Podfile.properties.json (New Architecture)
    :app_path => "#{Pod::Config.instance.installation_root}/.."
    # :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false' # For privacy manifests
  )

  # Firebase pods
  pod 'Firebase/Core'
  pod 'Firebase/Auth'
  pod 'Firebase/Firestore'

  # RNFirebase auth & firestore
  pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'
  pod 'RNFBAuth', :path => '../node_modules/@react-native-firebase/auth'
  pod 'RNFBFirestore', :path => '../node_modules/@react-native-firebase/firestore'

end

post_install do |installer|
  react_native_post_install(installer)

  # Remove the custom script phase for generating ExpoModulesProvider.swift
  # The use_expo_modules! and Expo's autolinking should handle this.

  # Suppress xcprivacy.bundle duplication
  installer.pods_project.targets.each do |target|
    if target.name.include?('abseil') && target.name.include?('xcprivacy')
      target.resources_build_phase.clear
    end

    target.build_configurations.each do |config|
      config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] ||= ''
      config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] += ' xcprivacy.bundle'
    end
  end

  # If New Architecture is enabled, you might need:
  # if ENV['RCT_NEW_ARCH_ENABLED'] == '1'
  #   expo_patch_react_imports!(installer)
  # end
end
